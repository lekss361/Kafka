{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },

  "services": {
      "kafka": {
        "Brokers": [
          "pr-sbpay-mq-1a1.nix.netlab.local:19091",
          "pr-sbpay-mq-1a2.nix.netlab.local:19092",
          "pr-sbpay-mq-1a3.nix.netlab.local:19093"
        ],
        "SchemaRegistry": {
          "schema.registry.url": "http://10.0.21.15:13681/",
          "schema.registry.basic.auth.user.info": "sr_api_admin:123456"
        },
        "ProducerConfig": {
          "acks": "all",
          "security.protocol": "SSL", //use PLAINTEXT for local tests
          "max.in.flight": "1",
          "compression.type": "none",
          "retry.backoff.ms": "100",
          "message.send.max.retries": "10",
          "ssl.ca.location": "..\\..\\..\\..\\..\\devops\\ansible\\inventories\\IBPS_dev\\certs\\kafka_root.crt",
          "ssl.certificate.location": "..\\..\\..\\..\\..\\devops\\ansible\\inventories\\IBPS_dev\\certs\\kafka_dev.pem",
          "ssl.key.location": "..\\..\\..\\..\\..\\devops\\ansible\\inventories\\IBPS_dev\\certs\\kafka_dev.key",
          "ssl.key.password": "123456"
        },
        "ConsumerConfig": {
          "security.protocol": "SSL", //use PLAINTEXT for local tests
          "ssl.ca.location": "..\\..\\..\\..\\..\\devops\\ansible\\inventories\\IBPS_dev\\certs\\kafka_root.crt",
          "ssl.certificate.location": "..\\..\\..\\..\\..\\devops\\ansible\\inventories\\IBPS_dev\\certs\\kafka_dev.pem",
          "ssl.key.location": "..\\..\\..\\..\\..\\devops\\ansible\\inventories\\IBPS_dev\\certs\\kafka_dev.key",
          "ssl.key.password": "123456"
        },
        "Consumers": {
          "com.ekassir.avro.c2ci.CreditTransferRequest": {
            "Topic": "IBPS_dev-ipsru-cts-rq",
            "Config": {
              "group.id": "IBPS_dev-ipsru-cts-rq_group_local_dev",
              "auto.offset.reset": "Earliest"
            },
            "UseDeadLetterQueue": false,
            "LoggerScopes": false,
            "UseCorrelationId": false,
            "Logging": false,
            "BufferSize": 1,
            "WorkersCount": 1
          },
          "com.ekassir.avro.c2ci.CreditTransferResponse": {
            "Topic": "IBPS_dev-ipsru-cts-rs",
            "Config": {
              "group.id": "IBPS_dev-ipsru-cts-rs_group_local_dev",
              "auto.offset.reset": "Earliest"
            },
            "UseDeadLetterQueue": false,
            "LoggerScopes": false,
            "UseCorrelationId": false,
            "Logging": false,
            "BufferSize": 1,
            "WorkersCount": 1
          },
          "timeout": {
            "Topic": "IBPS_dev-ipsru-timeout",
            "Config": {
              "group.id": "dev_local_timeout",
              "auto.offset.reset": "Earliest"
            },
            "BufferSize": 1,
            "WorkersCount": 1
          }
        },
        "Producers": {
          "default": {
            "SchemaRegistrationBehavior": "Never",
            "Config": {
              //customize config for this producer
            }
          },
          "com.ekassir.avro.c2ci.CreditTransferRequest": {
            "Topic": "IBPS_dev-oltp-cts-rq"
          },
          "com.ekassir.avro.c2ci.CreditTransferResponse": {
            "Topic": "IBPS_dev-oltp-cts-rs"
          },
          "com.ekassir.avro.c2ci.CompletionRequest": {
            "Topic": "IBPS_dev-oltp-cts-cr"
          },
          "com.ekassir.avro.c2ci.VaultMessage": {
            "Topic": "IBPS_dev-oltp-message_vault"
          }
        }
      },

      "timeout": {
        "TimeoutTopic": "IBPS_dev-oltp-sys_timeout",
        "Timeouts": {
          "com.ekassir.avro.c2ci.CreditTransferResponse": {
            "Timeout": "00:00:15",
            "ReplyToTopic": "IBPS_dev-ipsru-lookup_timeout"
          },
          "com.ekassir.avro.c2ci.CompletionRequest": {
            "Timeout": "00:00:06",
            "ReplyToTopic": "IBPS_dev-ipsru-lookup_timeout"
          }
        }
      },

      "ipsService": {
        "BaseUrl": "https://localhost:4455",
        "RequestTimeout": "00:00:10",
        "ClientCertificatePath": "..\\..\\..\\..\\..\\devops\\ansible\\inventories\\IBPS_dev\\certs\\nspk_ekassir.pfx",
        "ClientCertificatePassword": "1234"
      },

      "Couchbase": {
        "ConnectionString": "couchbase://10.2.13.11",
        "UserName": "ipsru-processing",
        "Password": "123456"
      },
      "Buckets": {
        "DefaultBucket": "IBPS_dev-ipsru-processingcache"
      },
      "crypto": {
        "cryptoServiceUrl": "https://10.0.21.15:13001/v2",
        "disableCertificateValidation": true,
        "ClientCertificatePath": "..\\..\\..\\..\\..\\devops\\ansible\\inventories\\IBPS_dev\\certs\\supercert.pfx",
        "clientCertificatePassword": "123",
        "DecryptedContentType": "application\\xml"
      }
    },
    "kafka1": {
      "BaseDirectory": "C:\\Users\\KondratievAF\\source\\repos\\API\\API\\bin\\Debug\\net6.0\\",
      "Brokers": [
        "pr-sbpay-mq-1a1.nix.netlab.local:19091",
        "pr-sbpay-mq-1a2.nix.netlab.local:19092",
        "pr-sbpay-mq-1a3.nix.netlab.local:19093"
      ],
      "ProducerConfig": {
        "acks": "all",
        "security.protocol": "SSL", //use PLAINTEXT for local tests
        "max.in.flight": "1",
        "compression.type": "none",
        "retry.backoff.ms": "100",
        "message.send.max.retries": "10",
        "ssl.ca.location": "Certificates\\kafka-truststore.crt",
        "ssl.certificate.location": "\\Certificates\\kafka-client-keystore.pem",
        "ssl.key.location": "\\Certificates\\kafka-client-keystore.key",
        "ssl.key.password": "123456"

      },
      "ConsumerConfig": {
        "security.protocol": "SSL",
        "ssl.ca.location": "/Certificates/kafka-truststore.crt",
        "ssl.certificate.location": "/Certificates/kafka-client-keystore.pem",
        "ssl.key.location": "/Certificates/kafka-client-keystore.key",
        "ssl.key.password": "123456",
        "auto.offset.reset": "Earliest",
        "EnableAutoCommit": "false",
        "GroupId": "sample-group"
      }
    }
}  